import logging
from datetime import datetime
from typing import Optional, Dict, List
from telebot import TeleBot
from telebot.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, 
    InlineKeyboardMarkup, InlineKeyboardButton
)

from config.settings import Config
from database import DatabaseManager, SubscriptionService, SubscriptionType
from utils.helpers import format_datetime, truncate_text


class UserHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager, 
                 config: Config, signal_service):
        self.bot = bot
        self.db = db_manager
        self.config = config
        self.signal_service = signal_service
        self.subscription_service = SubscriptionService(db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.bot.message_handler(commands=['start'])(self.cmd_start)
        self.bot.message_handler(commands=['help'])(self.cmd_help)
        # self.bot.message_handler(commands=['subscribe'])(self.cmd_subscribe)
        # self.bot.message_handler(commands=['status'])(self.cmd_status)
        # self.bot.message_handler(commands=['settings'])(self.cmd_settings)
        # self.bot.message_handler(commands=['analyze'])(self.cmd_analyze)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        self.bot.message_handler(func=lambda msg: msg.text == "üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")(self.handle_my_status)
        self.bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")(self.handle_settings)
        self.bot.message_handler(func=lambda msg: msg.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")(self.handle_subscription)
        self.bot.message_handler(func=lambda msg: msg.text == "üìà –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞")(self.handle_analyze_symbol)
        self.bot.message_handler(func=lambda msg: msg.text == "üìö –û–±—É—á–µ–Ω–∏–µ")(self.handle_education)
        self.bot.message_handler(func=lambda msg: msg.text == "üìã –¢–∞—Ä–∏—Ñ—ã")(self.handle_tariffs)
        self.bot.message_handler(func=lambda msg: msg.text == "üéØ –ú–æ–∏ —Å–∏–≥–Ω–∞–ª—ã")(self.handle_my_signals)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.bot.message_handler(func=lambda msg: msg.text and msg.text.startswith("analyze_"))(self.process_symbol_analysis)
        
        self.logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def create_main_keyboard(self, user_id: int) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
        btn_status = KeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å")
        btn_analyze = KeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞")
        btn_subscription = KeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞")
        btn_tariffs = KeyboardButton("üìã –¢–∞—Ä–∏—Ñ—ã")
        
        keyboard.add(btn_status, btn_analyze)
        keyboard.add(btn_subscription, btn_tariffs)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        can_receive, _, _ = self.subscription_service.can_receive_signals(user_id)
        if can_receive:
            btn_settings = KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            btn_signals = KeyboardButton("üéØ –ú–æ–∏ —Å–∏–≥–Ω–∞–ª—ã")
            btn_education = KeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ")
            
            keyboard.add(btn_settings, btn_signals)
            keyboard.add(btn_education)
        
        return keyboard
    
    def cmd_start(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referrer_id = None
        if message.text and len(message.text.split()) > 1:
            try:
                ref_code = message.text.split()[1]
                if ref_code.startswith('ref_'):
                    referrer_id = int(ref_code[4:])
            except ValueError:
                pass
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'user_id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name,
            'language_code': message.from_user.language_code,
            'referrer_id': referrer_id
        }
        
        user = self.subscription_service.create_or_update_user(user_data)
        if not user:
            self.bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription = self.subscription_service.get_active_subscription(user_id)
        
        welcome_text = f"""
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Signals Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> {self._get_subscription_status_text(subscription)}

üéÅ <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç 7 –¥–Ω–µ–π –ë–ï–°–ü–õ–ê–¢–ù–û!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è
        """
        
        self.bot.send_message(
            user_id, 
            welcome_text, 
            parse_mode='HTML',
            reply_markup=self.create_main_keyboard(user_id)
        )
    
    def cmd_help(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/settings - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/analyze <SYMBOL> - –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞

<b>üìä –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>
üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b> - AI-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –≤–∞—Å
üìà <b>–ê–Ω–∞–ª–∏–∑</b> - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –ø–∞—Ä—ã
üìö <b>–û–±—É—á–µ–Ω–∏–µ</b> - –ì–∞–π–¥—ã –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ

<b>üéÅ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>
‚Ä¢ Trial - 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ
‚Ä¢ Basic - $29.99/–º–µ—Å—è—Ü (10 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å)
‚Ä¢ Premium - $59.99/–º–µ—Å—è—Ü (25 —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å) 
‚Ä¢ VIP - $99.99/–º–µ—Å—è—Ü (–±–µ–∑–ª–∏–º–∏—Ç)

<b>üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username
        """
        
        self.bot.send_message(message.chat.id, help_text, parse_mode='HTML')
    
    def handle_my_status(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π —Å—Ç–∞—Ç—É—Å" """
        user_id = message.from_user.id
        
        user = self.subscription_service.get_user(user_id)
        subscription = self.subscription_service.get_active_subscription(user_id)
        
        if not user:
            self.bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> {user.user_id}
<b>–ò–º—è:</b> {user.full_name}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {format_datetime(user.created_at)}
<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {format_datetime(user.last_activity)}

üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>
{self._get_detailed_subscription_info(subscription)}
        """
        
        if subscription:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            tariff = self.db.get_tariff_plan(subscription.subscription_type.value)
            if tariff:
                status_text += f"""
üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {subscription.signals_used_today}/{tariff.signals_per_day}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {format_datetime(subscription.last_signal_date) if subscription.last_signal_date else '–ù–µ –ø–æ–ª—É—á–∞–ª–∏'}

‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
"""
                for feature, enabled in tariff.features.items():
                    status_text += f"‚Ä¢ {feature}: {'‚úÖ' if enabled else '‚ùå'}\n"
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user.total_referrals > 0:
            status_text += f"\nüë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {user.total_referrals} —á–µ–ª–æ–≤–µ–∫"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup()
        
        if not subscription or subscription.subscription_type.value == 'trial':
            keyboard.add(InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="upgrade_subscription"))
        
        keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_settings"))
        keyboard.add(InlineKeyboardButton("üìã –¢–∞—Ä–∏—Ñ—ã", callback_data="show_tariffs"))
        
        self.bot.send_message(user_id, status_text, parse_mode='HTML', reply_markup=keyboard)
    
    def handle_subscription(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–¥–ø–∏—Å–∫–∞" """
        user_id = message.from_user.id
        
        subscription = self.subscription_service.get_active_subscription(user_id)
        
        if subscription:
            self._show_active_subscription_info(user_id, subscription)
        else:
            self._show_subscription_offers(user_id)
    
    def handle_tariffs(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–¢–∞—Ä–∏—Ñ—ã" """
        user_id = message.from_user.id
        
        tariff_text = """
üíé <b>–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã</b>

üÜì <b>TRIAL</b> (7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
‚Ä¢ 3 —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ

üí∞ <b>BASIC</b> - $29.99/–º–µ—Å—è—Ü
‚Ä¢ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –°–∫–∏–¥–∫–∏: 3 –º–µ—Å (-11%) ‚Ä¢ 1 –≥–æ–¥ (-17%)

üöÄ <b>PREMIUM</b> - $59.99/–º–µ—Å—è—Ü
‚Ä¢ 25 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å  
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ Risk management –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
‚Ä¢ –°–∫–∏–¥–∫–∏: 3 –º–µ—Å (-11%) ‚Ä¢ 1 –≥–æ–¥ (-17%)

‚≠ê <b>VIP</b> - $99.99/–º–µ—Å—è—Ü
‚Ä¢ –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Premium
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–∏–Ω–∫–∞–º
‚Ä¢ –°–∫–∏–¥–∫–∏: 3 –º–µ—Å (-10%) ‚Ä¢ 1 –≥–æ–¥ (-17%)

üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - 20% —Å –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã  
‚Ä¢ Telegram-–∫–∞–Ω–∞–ª —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        """
        
        keyboard = InlineKeyboardMarkup()
        
        subscription = self.subscription_service.get_active_subscription(user_id)
        if not subscription:
            keyboard.add(InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Trial", callback_data="activate_trial"))
        else:
            keyboard.add(InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω", callback_data="upgrade_subscription"))
        
        keyboard.add(InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"))
        keyboard.add(InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="get_referral_link"))
        
        self.bot.send_message(user_id, tariff_text, parse_mode='HTML', reply_markup=keyboard)
    
    def handle_settings(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        can_receive, reason, tariff = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.send_message(user_id, f"‚ö†Ô∏è {reason}\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
            return
        
        settings = self.subscription_service.get_user_settings(user_id)
        if not settings:
            self.bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        settings_text = f"""
‚öôÔ∏è <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üìä <b>–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {settings.risk_level.title()}
‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {settings.min_confidence:.1%}
‚Ä¢ –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å: {settings.max_signals_per_day}

üìà <b>RSI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>  
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏: {settings.rsi_oversold_level}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏: {settings.rsi_overbought_level}

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª—ã: {'‚úÖ' if settings.signal_notifications else '‚ùå'}
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏: {'‚úÖ' if settings.news_notifications else '‚ùå'}
‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {'‚úÖ' if settings.marketing_notifications else '‚ùå'}

üïí <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã:</b> {settings.active_hours_start:02d}:00 - {settings.active_hours_end:02d}:00 ({settings.timezone})

üìã <b>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:</b>
{', '.join(settings.preferred_symbols) if settings.preferred_symbols else '–í—Å–µ —Å–∏–º–≤–æ–ª—ã'}

üåç <b>–Ø–∑—ã–∫:</b> {settings.language.upper()}
        """
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.add(
            InlineKeyboardButton("üéØ –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_trading"),
            InlineKeyboardButton("üìä RSI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="settings_rsi")
        )
        keyboard.add(
            InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
            InlineKeyboardButton("üïí –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data="settings_time")
        )
        keyboard.add(
            InlineKeyboardButton("üìã –°–∏–º–≤–æ–ª—ã", callback_data="settings_symbols"),
            InlineKeyboardButton("üåç –Ø–∑—ã–∫", callback_data="settings_language")
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Premium+
        if tariff and tariff.custom_settings:
            keyboard.add(
                InlineKeyboardButton("üéõÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ", callback_data="settings_advanced"),
                InlineKeyboardButton("üìà –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="settings_strategies")
            )
        
        keyboard.add(InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_save_default"))
        
        self.bot.send_message(user_id, settings_text, parse_mode='HTML', reply_markup=keyboard)
    
    def handle_analyze_symbol(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞" """
        user_id = message.from_user.id
        
        msg = self.bot.send_message(
            user_id,
            "üìà <b>–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT):\n\n"
            "üí° <i>–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø–∞—Ä—ã Binance Futures</i>",
            parse_mode='HTML'
        )
        
        self.bot.register_next_step_handler(msg, self.process_symbol_analysis)
    
    def process_symbol_analysis(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = message.from_user.id
        
        if not message.text:
            self.bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª")
            return
        
        symbol = message.text.strip().upper()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        if not symbol.endswith('USDT') and not symbol.endswith('BUSD'):
            self.bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT –∏–ª–∏ BUSD")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = self.bot.send_message(
            user_id,
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...\n\n"
            "‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥",
            parse_mode='HTML'
        )
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ services)
            analysis_result = self.signal_service.analyze_single_symbol(symbol)
            
            if analysis_result:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                self.bot.delete_message(user_id, processing_msg.message_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.bot.send_message(user_id, analysis_result, parse_mode='HTML')
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                chart_path = f"charts/{symbol}_analysis.png"
                try:
                    with open(chart_path, 'rb') as chart:
                        self.bot.send_photo(user_id, chart)
                except FileNotFoundError:
                    pass
            else:
                self.bot.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {symbol}\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Binance\n"
                    "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n"  
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞",
                    user_id,
                    processing_msg.message_id
                )
        
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol} –¥–ª—è {user_id}: {e}")
            self.bot.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                user_id,
                processing_msg.message_id
            )
    
    def handle_education(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û–±—É—á–µ–Ω–∏–µ" """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        can_receive, reason, _ = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.send_message(user_id, f"‚ö†Ô∏è {reason}\n–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
            return
        
        education_text = """
üìö <b>–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>

üéì <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>

1Ô∏è‚É£ <b>–û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</b>
   ‚Ä¢ –°–≤–µ—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

2Ô∏è‚É£ <b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã</b>
   ‚Ä¢ RSI, MACD, Stochastic
   ‚Ä¢ Bollinger Bands, ATR
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ

3Ô∏è‚É£ <b>Risk Management</b>
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º
   ‚Ä¢ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
   ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞

4Ô∏è‚É£ <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞</b>
   ‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —ç–º–æ—Ü–∏–∏
   ‚Ä¢ –ü–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏
   ‚Ä¢ –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞

üìñ <b>–§–æ—Ä–º–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:</b>
‚Ä¢ PDF –≥–∞–π–¥—ã
‚Ä¢ –í–∏–¥–µ–æ —É—Ä–æ–∫–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –¢–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìñ –°–∫–∞—á–∞—Ç—å PDF-–≥–∞–π–¥", callback_data="download_guide"))
        keyboard.add(InlineKeyboardButton("üé• –í–∏–¥–µ–æ –∫—É—Ä—Å—ã", url="https://youtube.com/yourchannel"))
        keyboard.add(InlineKeyboardButton("üí¨ Telegram –∫–∞–Ω–∞–ª", url="https://t.me/yourchannel"))
        keyboard.add(InlineKeyboardButton("‚ùì FAQ", callback_data="show_faq"))
        
        self.bot.send_message(user_id, education_text, parse_mode='HTML', reply_markup=keyboard)
    
    def handle_my_signals(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ —Å–∏–≥–Ω–∞–ª—ã" """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        can_receive, reason, _ = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.send_message(user_id, f"‚ö†Ô∏è {reason}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        signals_text = f"""
üéØ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>

üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 45
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 28 (62.2%)
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: 17 (37.8%)
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: +15.6%

üìà <b>–ü–æ —Ç–∏–ø–∞–º:</b>
‚Ä¢ LONG —Å–∏–≥–Ω–∞–ª—ã: 24 (58.3% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö)
‚Ä¢ SHORT —Å–∏–≥–Ω–∞–ª—ã: 21 (66.7% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö)

‚≠ê <b>–õ—É—á—à–∏–µ —Å–∏–º–≤–æ–ª—ã:</b>
1. BTCUSDT: +8.4% (12 —Å–∏–≥–Ω–∞–ª–æ–≤)
2. ETHUSDT: +4.2% (8 —Å–∏–≥–Ω–∞–ª–æ–≤)  
3. ADAUSDT: +2.1% (5 —Å–∏–≥–Ω–∞–ª–æ–≤)

üìâ <b>–°—Ä–µ–¥–Ω–∏–π R:R:</b> 1:2.3
‚è±Ô∏è <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 4.5 —á–∞—Å–∞

üí° <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="detailed_signals"))
        keyboard.add(InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="signals_analytics"))
        keyboard.add(InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_signals"))
        
        self.bot.send_message(user_id, signals_text, parse_mode='HTML', reply_markup=keyboard)
    
    def _get_subscription_status_text(self, subscription) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if not subscription:
            return "üÜì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        
        if subscription.is_trial:
            days_left = subscription.days_remaining
            return f"üéÅ Trial –ø–æ–¥–ø–∏—Å–∫–∞ ({days_left} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"
        
        status_map = {
            'basic': 'üí∞ Basic',
            'premium': 'üöÄ Premium', 
            'vip': '‚≠ê VIP',
            'lifetime': '‚ôæÔ∏è Lifetime'
        }
        
        plan_name = status_map.get(subscription.subscription_type.value, subscription.subscription_type.value)
        
        if subscription.expires_at:
            days_left = subscription.days_remaining
            return f"{plan_name} ({days_left} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"
        else:
            return f"{plan_name} (–∞–∫—Ç–∏–≤–Ω–∞)"
    
    def _get_detailed_subscription_info(self, subscription) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        if not subscription:
            return """
‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

üéÅ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?
–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Trial –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π!
            """
        
        info = f"""
‚úÖ <b>{subscription.subscription_type.value.upper()}</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {subscription.status.value}
‚Ä¢ –ù–∞—á–∞–ª–æ: {format_datetime(subscription.started_at)}
"""
        
        if subscription.expires_at:
            info += f"‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {format_datetime(subscription.expires_at)}\n"
            days_left = subscription.days_remaining
            if days_left <= 3:
                info += f"‚ö†Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π!</b>\n"
        else:
            info += "‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n"
        
        if subscription.auto_renewal:
            info += "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
        
        return info
    
    def _show_active_subscription_info(self, user_id: int, subscription):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
        tariff = self.db.get_tariff_plan(subscription.subscription_type.value)
        
        info_text = f"""
üíé <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>

{self._get_detailed_subscription_info(subscription)}

üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:</b>
‚Ä¢ –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {tariff.signals_per_day if tariff else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {subscription.signals_used_today}

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
"""
        
        if tariff:
            for feature, enabled in tariff.features.items():
                info_text += f"‚Ä¢ {feature.replace('_', ' ').title()}: {'‚úÖ' if enabled else '‚ùå'}\n"
        
        keyboard = InlineKeyboardMarkup()
        
        if subscription.subscription_type.value == 'trial':
            keyboard.add(InlineKeyboardButton("üíé –£–ª—É—á—à–∏—Ç—å –¥–æ Basic", callback_data="upgrade_basic"))
            keyboard.add(InlineKeyboardButton("üöÄ –£–ª—É—á—à–∏—Ç—å –¥–æ Premium", callback_data="upgrade_premium"))
        elif subscription.subscription_type.value == 'basic':
            keyboard.add(InlineKeyboardButton("üöÄ –£–ª—É—á—à–∏—Ç—å –¥–æ Premium", callback_data="upgrade_premium"))
            keyboard.add(InlineKeyboardButton("‚≠ê –£–ª—É—á—à–∏—Ç—å –¥–æ VIP", callback_data="upgrade_vip"))
        elif subscription.subscription_type.value == 'premium':
            keyboard.add(InlineKeyboardButton("‚≠ê –£–ª—É—á—à–∏—Ç—å –¥–æ VIP", callback_data="upgrade_vip"))
        
        if subscription.auto_renewal:
            keyboard.add(InlineKeyboardButton("üîÑ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="disable_auto_renewal"))
        else:
            keyboard.add(InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="enable_auto_renewal"))
        
        keyboard.add(InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history"))
        
        self.bot.send_message(user_id, info_text, parse_mode='HTML', reply_markup=keyboard)
    
    def _show_subscription_offers(self, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
        offers_text = """
üéÅ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:

üÜì <b>TRIAL</b> - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 7 –¥–Ω–µ–π
‚Ä¢ 3 —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üí∞ <b>BASIC</b> - $29.99/–º–µ—Å—è—Ü
‚Ä¢ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üöÄ <b>PREMIUM</b> - $59.99/–º–µ—Å—è—Ü  
‚Ä¢ 25 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

‚≠ê <b>VIP</b> - $99.99/–º–µ—Å—è—Ü
‚Ä¢ –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

üí° <i>–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ Trial!</i>
        """
        
        keyboard = InlineKeyboardMarkup()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ trial
        user = self.subscription_service.get_user(user_id)
        if user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É–∂–µ trial
            try:
                with self.db.get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT trial_used FROM subscriptions WHERE user_id = %s AND trial_used = TRUE", (user_id,))
                    trial_used = cursor.fetchone()
                
                if not trial_used:
                    keyboard.add(InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Trial", callback_data="activate_trial"))
            except:
                pass
        
        keyboard.add(InlineKeyboardButton("üí∞ Basic - $29.99", callback_data="buy_basic"))
        keyboard.add(InlineKeyboardButton("üöÄ Premium - $59.99", callback_data="buy_premium"))  
        keyboard.add(InlineKeyboardButton("‚≠ê VIP - $99.99", callback_data="buy_vip"))
        keyboard.add(InlineKeyboardButton("üìã –°—Ä–∞–≤–Ω–∏—Ç—å –ø–ª–∞–Ω—ã", callback_data="compare_plans"))
        
        self.bot.send_message(user_id, offers_text, parse_mode='HTML', reply_markup=keyboard)


def register_user_handlers(bot: TeleBot, db_manager: DatabaseManager, 
                         config: Config, signal_service):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    user_handlers = UserHandlers(bot, db_manager, config, signal_service)
    user_handlers.register_handlers()
    
    return user_handlers