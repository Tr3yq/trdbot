import logging
from decimal import Decimal
from telebot import TeleBot
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config.settings import Config
from database import DatabaseManager, SubscriptionService, SubscriptionType
from utils.helpers import format_datetime


class CallbackHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager, config: Config):
        self.bot = bot
        self.db = db_manager
        self.config = config
        self.subscription_service = SubscriptionService(db_manager)
        self.logger = logging.getLogger(__name__)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏
        self.bot.callback_query_handler(func=lambda call: call.data == "activate_trial")(self.activate_trial)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))(self.handle_buy_subscription)
        # self.bot.callback_query_handler(func=lambda call: call.data.startswith("upgrade_"))(self.handle_upgrade)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("settings_"))(self.handle_settings)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ
        self.bot.callback_query_handler(func=lambda call: call.data == "show_tariffs")(self.show_tariffs)
        # self.bot.callback_query_handler(func=lambda call: call.data == "compare_plans")(self.compare_plans)
        self.bot.callback_query_handler(func=lambda call: call.data == "get_referral_link")(self.get_referral_link)
        
        # –û–±—É—á–µ–Ω–∏–µ
        self.bot.callback_query_handler(func=lambda call: call.data == "download_guide")(self.download_guide)
        self.bot.callback_query_handler(func=lambda call: call.data == "show_faq")(self.show_faq)
        
        # –°–∏–≥–Ω–∞–ª—ã
        self.bot.callback_query_handler(func=lambda call: call.data == "detailed_signals")(self.detailed_signals)
        self.bot.callback_query_handler(func=lambda call: call.data == "signals_analytics")(self.signals_analytics)
        
        self.logger.info("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def activate_trial(self, call: CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ trial
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM subscriptions WHERE user_id = %s AND trial_used = TRUE", (user_id,))
                if cursor.fetchone():
                    self.bot.answer_callback_query(
                        call.id, 
                        "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", 
                        show_alert=True
                    )
                    return
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ trial –¥–ª—è {user_id}: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º trial –ø–æ–¥–ø–∏—Å–∫—É
        subscription = self.subscription_service.create_trial_subscription(user_id, self.config.TRIAL_PERIOD_DAYS)
        
        if subscription:
            success_text = f"""
üéâ <b>Trial –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

‚úÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {self.config.TRIAL_PERIOD_DAYS} –¥–Ω–µ–π
‚úÖ <b>–°–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å:</b> 3
‚úÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_datetime(subscription.expires_at)}

üöÄ <b>–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:</b>
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –ò–ò
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"</i>
            """
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="settings_trading"))
            keyboard.add(InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª", callback_data="analyze_symbol"))
            
            self.bot.edit_message_text(
                success_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            self.bot.answer_callback_query(call.id, "‚úÖ Trial –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Trial",
                show_alert=True
            )
    
    def handle_buy_subscription(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = call.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data
        subscription_type = call.data.split("_")[1]  # buy_basic -> basic
        
        tariff = self.db.get_tariff_plan(subscription_type)
        if not tariff:
            self.bot.answer_callback_query(call.id, "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        payment_text = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {tariff.name}</b>

üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>

üí∞ <b>1 –º–µ—Å—è—Ü</b> - ${tariff.price_monthly}
üíé <b>3 –º–µ—Å—è—Ü–∞</b> - ${tariff.price_quarterly} <i>(—ç–∫–æ–Ω–æ–º–∏—è 11%)</i>
‚≠ê <b>1 –≥–æ–¥</b> - ${tariff.price_yearly} <i>(—ç–∫–æ–Ω–æ–º–∏—è 17%)</i>

üéØ <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ {tariff.name}:</b>
‚Ä¢ {tariff.signals_per_day} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ {"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" if tariff.priority_support else "–û–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"}
‚Ä¢ {"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" if tariff.custom_settings else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"}
‚Ä¢ {"–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞" if tariff.analytics_access else "–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"}

üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b> Card, Crypto, PayPal
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(f"üí∞ 1 –º–µ—Å - ${tariff.price_monthly}", 
                               callback_data=f"pay_{subscription_type}_1")
        )
        keyboard.add(
            InlineKeyboardButton(f"üíé 3 –º–µ—Å - ${tariff.price_quarterly}", 
                               callback_data=f"pay_{subscription_type}_3")
        )
        keyboard.add(
            InlineKeyboardButton(f"‚≠ê 1 –≥–æ–¥ - ${tariff.price_yearly}", 
                               callback_data=f"pay_{subscription_type}_12")
        )
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_tariffs"))
        
        self.bot.edit_message_text(
            payment_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def handle_settings(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_id = call.from_user.id
        setting_type = call.data.split("_")[1]  # settings_trading -> trading
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        can_receive, reason, tariff = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.answer_callback_query(call.id, f"‚ö†Ô∏è {reason}", show_alert=True)
            return
        
        settings = self.subscription_service.get_user_settings(user_id)
        if not settings:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        if setting_type == "trading":
            self._show_trading_settings(call, settings)
        elif setting_type == "rsi":
            self._show_rsi_settings(call, settings)
        elif setting_type == "notifications":
            self._show_notification_settings(call, settings)
        elif setting_type == "time":
            self._show_time_settings(call, settings)
        elif setting_type == "symbols":
            self._show_symbols_settings(call, settings)
        elif setting_type == "language":
            self._show_language_settings(call, settings)
        elif setting_type == "advanced" and tariff.custom_settings:
            self._show_advanced_settings(call, settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def _show_trading_settings(self, call: CallbackQuery, settings):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        trading_text = f"""
üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: <b>{settings.risk_level.title()}</b>
‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{settings.min_confidence:.1%}</b>
‚Ä¢ –ú–∞–∫—Å. —Å–∏–≥–Ω–∞–ª–æ–≤/–¥–µ–Ω—å: <b>{settings.max_signals_per_day}</b>

üí° <b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞:</b>

üõ°Ô∏è <b>Conservative</b> - –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%+
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ R:R –æ—Ç 1:3

‚öñÔ∏è <b>Moderate</b> - –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫  
‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 65%+
‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ä–∏—Å–∫–∞ –∏ –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ R:R –æ—Ç 1:2

üî• <b>Aggressive</b> - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 50%+
‚Ä¢ –ë–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤
‚Ä¢ R:R –æ—Ç 1:1.5
        """
        
        keyboard = InlineKeyboardMarkup()
        
        # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        risk_levels = [
            ("üõ°Ô∏è Conservative", "conservative"),
            ("‚öñÔ∏è Moderate", "moderate"), 
            ("üî• Aggressive", "aggressive")
        ]
        
        for name, value in risk_levels:
            marker = "‚úÖ" if settings.risk_level == value else ""
            keyboard.add(
                InlineKeyboardButton(
                    f"{marker} {name}",
                    callback_data=f"set_risk_{value}"
                )
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_levels = [
            ("50%", 0.5), ("60%", 0.6), ("70%", 0.7), ("80%", 0.8), ("90%", 0.9)
        ]
        
        conf_buttons = []
        for name, value in confidence_levels:
            marker = "‚úÖ" if abs(settings.min_confidence - value) < 0.05 else ""
            conf_buttons.append(
                InlineKeyboardButton(
                    f"{marker} {name}",
                    callback_data=f"set_confidence_{int(value*100)}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(conf_buttons), 3):
            keyboard.add(*conf_buttons[i:i+3])
        
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="open_settings"))
        
        self.bot.edit_message_text(
            trading_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def _show_rsi_settings(self, call: CallbackQuery, settings):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSI"""
        rsi_text = f"""
üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞</b>

üìà <b>–¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏:</b>
‚Ä¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (Long): <b>{settings.rsi_oversold_level}</b>
‚Ä¢ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (Short): <b>{settings.rsi_overbought_level}</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>

üîµ <b>–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ:</b>
‚Ä¢ Long: 25-30 (–º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å)
‚Ä¢ Short: 70-75

‚ö™ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ:</b>
‚Ä¢ Long: 30-35 (–±–∞–ª–∞–Ω—Å)
‚Ä¢ Short: 65-70

üü° <b>–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ:</b>
‚Ä¢ Long: 35-40 (–±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤)
‚Ä¢ Short: 60-65

‚ö†Ô∏è <i>–ë–æ–ª–µ–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—é—Ç –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –Ω–æ –º–æ–≥—É—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</i>
        """
        
        keyboard = InlineKeyboardMarkup()
        
        # RSI Long (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
        keyboard.add(InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="rsi_section_long"))
        
        long_levels = [20, 25, 30, 35, 40]
        long_buttons = []
        for level in long_levels:
            marker = "‚úÖ" if settings.rsi_oversold_level == level else ""
            long_buttons.append(
                InlineKeyboardButton(
                    f"{marker} {level}",
                    callback_data=f"set_rsi_long_{level}"
                )
            )
        
        keyboard.add(*long_buttons)
        
        # RSI Short (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å) 
        keyboard.add(InlineKeyboardButton("üìâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="rsi_section_short"))
        
        short_levels = [60, 65, 70, 75, 80]
        short_buttons = []
        for level in short_levels:
            marker = "‚úÖ" if settings.rsi_overbought_level == level else ""
            short_buttons.append(
                InlineKeyboardButton(
                    f"{marker} {level}",
                    callback_data=f"set_rsi_short_{level}"
                )
            )
        
        keyboard.add(*short_buttons)
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="open_settings"))
        
        self.bot.edit_message_text(
            rsi_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def _show_notification_settings(self, call: CallbackQuery, settings):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notif_text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

üì± <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.signal_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.news_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.marketing_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ <b>–°–∏–≥–Ω–∞–ª—ã</b> - –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚Ä¢ <b>–ù–æ–≤–æ—Å—Ç–∏</b> - –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫
‚Ä¢ <b>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</b> - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞

‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {settings.active_hours_start:02d}:00 - {settings.active_hours_end:02d}:00 ({settings.timezone})
        """
        
        keyboard = InlineKeyboardMarkup()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications = [
            ("üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã", "signal_notifications", settings.signal_notifications),
            ("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞", "news_notifications", settings.news_notifications),
            ("üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ", "marketing_notifications", settings.marketing_notifications)
        ]
        
        for name, key, value in notifications:
            status = "‚úÖ –í–ö–õ" if value else "‚ùå –í–´–ö–õ"
            keyboard.add(
                InlineKeyboardButton(
                    f"{name}: {status}",
                    callback_data=f"toggle_{key}"
                )
            )
        
        keyboard.add(InlineKeyboardButton("üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", callback_data="settings_time"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="open_settings"))
        
        self.bot.edit_message_text(
            notif_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def show_tariffs(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
        tariffs_text = """
üíé <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤</b>

üÜì <b>TRIAL</b> - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (7 –¥–Ω–µ–π)
‚îú 3 —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–µ–Ω—å
‚îú –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚îî –û–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí∞ <b>BASIC</b> - $29.99/–º–µ—Å
‚îú 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚îú –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞  
‚îú –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚îî –°–∫–∏–¥–∫–∏: 3–º (-11%) | 1–≥ (-17%)

üöÄ <b>PREMIUM</b> - $59.99/–º–µ—Å
‚îú 25 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚îú –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚îú Risk management
‚îî –°–∫–∏–¥–∫–∏: 3–º (-11%) | 1–≥ (-17%)

‚≠ê <b>VIP</b> - $99.99/–º–µ—Å
‚îú –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï —Å–∏–≥–Ω–∞–ª—ã
‚îú –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Premium
‚îú –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚îú –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚îî –°–∫–∏–¥–∫–∏: 3–º (-10%) | 1–≥ (-17%)

üéÅ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö:</b>
‚Ä¢ Telegram –∫–∞–Ω–∞–ª —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
‚Ä¢ –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (20%)
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Trial", callback_data="activate_trial"))
        keyboard.add(InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å Basic", callback_data="buy_basic"))
        keyboard.add(InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium"))
        keyboard.add(InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å VIP", callback_data="buy_vip"))
        keyboard.add(InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="get_referral_link"))
        
        try:
            self.bot.edit_message_text(
                tariffs_text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        except:
            self.bot.send_message(
                call.message.chat.id,
                tariffs_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
        
        self.bot.answer_callback_query(call.id)
    
    def get_referral_link(self, call: CallbackQuery):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
        user_id = call.from_user.id
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = self.bot.get_me().username
        referral_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        user = self.subscription_service.get_user(user_id)
        
        referral_text = f"""
üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>
<code>{referral_link}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.total_referrals if user else 0} —á–µ–ª–æ–≤–µ–∫
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: $0.00 (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ)

üí∞ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ 20% —Å –∏—Ö –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏

üéØ <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:</b>
‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö

üí° <i>–ß–µ–º –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –≤–∞—à –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!</i>
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=referral_link))
        keyboard.add(InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referral_history"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_tariffs"))
        
        self.bot.edit_message_text(
            referral_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id, "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!")
    
    def download_guide(self, call: CallbackQuery):
        """–°–∫–∞—á–∞—Ç—å –æ–±—É—á–∞—é—â–∏–π –≥–∞–π–¥"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        can_receive, reason, _ = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.answer_callback_query(call.id, f"‚ö†Ô∏è {reason}", show_alert=True)
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª (–ø—É—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
            with open(self.config.TRAINING_FILE_PATH, "rb") as file:
                self.bot.send_document(
                    user_id,
                    file,
                    caption="""
üìö <b>–ü–æ–ª–Ω—ã–π –≥–∞–π–¥ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É</b>

üìñ <b>–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:</b>
‚Ä¢ –û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞  
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞

üí° <i>–ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!</i>
                    """,
                    parse_mode='HTML'
                )
            
            self.bot.answer_callback_query(call.id, "‚úÖ –ì–∞–π–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        except FileNotFoundError:
            self.bot.answer_callback_query(
                call.id,
                "‚ùå –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                show_alert=True
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è {user_id}: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    def show_faq(self, call: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
        faq_text = """
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã?</b>
A: –ù–∞—à –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –æ–±—ä–µ–º—ã –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º Stop Loss –∏ Take Profit —É—Ä–æ–≤–Ω–µ–π.

<b>Q: –ö–∞–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤?</b>  
A: –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å 65-75% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ú—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ R:R –Ω–µ –º–µ–Ω–µ–µ 1:2.

<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Å–µ–±—è?</b>
A: –î–∞! –í Premium –∏ VIP –ø–ª–∞–Ω–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSI, —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.

<b>Q: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ª–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é?</b>
A: –ü–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–µ–π—á–∞—Å —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.

<b>Q: –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?</b>  
A: –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

<b>Q: –í –∫–∞–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–≥–Ω–∞–ª—ã?</b>
A: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 15m, –Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç 5m –¥–æ 4h –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

<b>Q: –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç 24/7?</b>
A: –î–∞, –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤–µ–¥–µ—Ç—Å—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—ã –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/support_username"))
        keyboard.add(InlineKeyboardButton("üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="download_guide"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="download_guide"))
        
        self.bot.edit_message_text(
            faq_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def detailed_signals(self, call: CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        can_receive, reason, _ = self.subscription_service.can_receive_signals(user_id)
        if not can_receive:
            self.bot.answer_callback_query(call.id, f"‚ö†Ô∏è {reason}", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–∑–∞–≥–ª—É—à–∫–∞ - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ services)
        history_text = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>

üü¢ <b>#1247 BTCUSDT LONG</b> - 2024-12-15 14:30
‚îú –í—Ö–æ–¥: $42,150 | SL: $41,200 | TP: $44,050
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (+4.5%)
‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3h 25m

üî¥ <b>#1246 ETHUSDT SHORT</b> - 2024-12-15 11:15  
‚îú –í—Ö–æ–¥: $2,285 | SL: $2,320 | TP: $2,210
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå SL —Å—Ä–∞–±–æ—Ç–∞–ª (-1.5%)
‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1h 48m

üü¢ <b>#1245 ADAUSDT LONG</b> - 2024-12-15 08:45
‚îú –í—Ö–æ–¥: $0.385 | SL: $0.375 | TP: $0.405  
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (+5.2%)
‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5h 12m

üü¢ <b>#1244 SOLUSDT LONG</b> - 2024-12-14 16:20
‚îú –í—Ö–æ–¥: $98.50 | SL: $95.20 | TP: $105.80
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (+7.4%)
‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8h 35m

üü° <b>#1243 DOTUSDT SHORT</b> - 2024-12-14 13:10
‚îú –í—Ö–æ–¥: $7.25 | SL: $7.55 | TP: $6.65
‚îú –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚è≥ –ê–∫—Ç–∏–≤–µ–Ω
‚îî –ü—Ä–æ—à–ª–æ: 1d 4h

üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b> +11.6% | Win Rate: 75%
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="signals_analytics"))
        keyboard.add(InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_signals"))
        keyboard.add(InlineKeyboardButton("üéØ –§–∏–ª—å—Ç—Ä—ã", callback_data="signals_filters"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_signals"))
        
        self.bot.edit_message_text(
            history_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    def signals_analytics(self, call: CallbackQuery):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = call.from_user.id
        
        analytics_text = """
üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤</b>

üìä <b>–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (30 –¥–Ω–µ–π):</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 45
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: 28 (62.2%)
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: 17 (37.8%)  
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: +15.6%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π R:R: 1:2.3

üìà <b>–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:</b>
‚Ä¢ LONG: 24 —Å–∏–≥–Ω–∞–ª–∞ (58.3% –≤–∏–Ω—Ä–µ–π—Ç)
  ‚îî –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +3.2% –∑–∞ —Å–¥–µ–ª–∫—É
‚Ä¢ SHORT: 21 —Å–∏–≥–Ω–∞–ª (66.7% –≤–∏–Ω—Ä–µ–π—Ç)  
  ‚îî –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: +2.8% –∑–∞ —Å–¥–µ–ª–∫—É

‚≠ê <b>–¢–û–ü —Å–∏–º–≤–æ–ª—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏:</b>
1. BTCUSDT: +8.4% (12 —Å–∏–≥–Ω–∞–ª–æ–≤, 75% WR)
2. ETHUSDT: +4.2% (8 —Å–∏–≥–Ω–∞–ª–æ–≤, 62.5% WR)
3. ADAUSDT: +2.1% (5 —Å–∏–≥–Ω–∞–ª–æ–≤, 80% WR)
4. SOLUSDT: +1.8% (6 —Å–∏–≥–Ω–∞–ª–æ–≤, 50% WR)

üìâ <b>–•—É–¥—à–∏–µ —Å–∏–º–≤–æ–ª—ã:</b>
1. XRPUSDT: -2.1% (4 —Å–∏–≥–Ω–∞–ª–∞, 25% WR)
2. DOTUSDT: -1.5% (3 —Å–∏–≥–Ω–∞–ª–∞, 33% WR)

‚è±Ô∏è <b>–ü–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è:</b>
‚Ä¢ < 2h: 65% –≤–∏–Ω—Ä–µ–π—Ç (–±—ã—Å—Ç—Ä—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è)
‚Ä¢ 2-6h: 71% –≤–∏–Ω—Ä–µ–π—Ç (–æ—Å–Ω–æ–≤–Ω–∞—è –º–∞—Å—Å–∞)  
‚Ä¢ > 6h: 55% –≤–∏–Ω—Ä–µ–π—Ç (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ)

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ BTCUSDT –∏ ETHUSDT
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ XRPUSDT  
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: 2-6 —á–∞—Å–æ–≤
        """
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="detailed_signals"))
        keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–º–≤–æ–ª—ã", callback_data="settings_symbols"))
        keyboard.add(InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_signals"))
        
        self.bot.edit_message_text(
            analytics_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        self.bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def handle_setting_change(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_id = call.from_user.id
        
        # –ü–∞—Ä—Å–∏–º callback_data
        if call.data.startswith("set_risk_"):
            risk_level = call.data.split("_")[-1]
            self._update_risk_level(user_id, risk_level, call)
            
        elif call.data.startswith("set_confidence_"):
            confidence = int(call.data.split("_")[-1]) / 100
            self._update_confidence(user_id, confidence, call)
            
        elif call.data.startswith("set_rsi_long_"):
            level = int(call.data.split("_")[-1])
            self._update_rsi_long(user_id, level, call)
            
        elif call.data.startswith("set_rsi_short_"):
            level = int(call.data.split("_")[-1])
            self._update_rsi_short(user_id, level, call)
            
        elif call.data.startswith("toggle_"):
            setting_name = call.data.split("toggle_", 1)[1]
            self._toggle_notification(user_id, setting_name, call)
    
    def _update_risk_level(self, user_id: int, risk_level: str, call: CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"""
        success = self.subscription_service.update_user_settings(
            user_id, 
            {"risk_level": risk_level}
        )
        
        if success:
            self.bot.answer_callback_query(
                call.id, 
                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {risk_level.title()}"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            settings = self.subscription_service.get_user_settings(user_id)
            if settings:
                self._show_trading_settings(call, settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def _update_confidence(self, user_id: int, confidence: float, call: CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"""
        success = self.subscription_service.update_user_settings(
            user_id, 
            {"min_confidence": confidence}
        )
        
        if success:
            self.bot.answer_callback_query(
                call.id, 
                f"‚úÖ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {confidence:.0%}"
            )
            settings = self.subscription_service.get_user_settings(user_id)
            if settings:
                self._show_trading_settings(call, settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def _update_rsi_long(self, user_id: int, level: int, call: CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å RSI —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Long"""
        success = self.subscription_service.update_user_settings(
            user_id, 
            {"rsi_oversold_level": level}
        )
        
        if success:
            self.bot.answer_callback_query(
                call.id, 
                f"‚úÖ RSI Long —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}"
            )
            settings = self.subscription_service.get_user_settings(user_id)
            if settings:
                self._show_rsi_settings(call, settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def _update_rsi_short(self, user_id: int, level: int, call: CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å RSI —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Short"""
        success = self.subscription_service.update_user_settings(
            user_id, 
            {"rsi_overbought_level": level}
        )
        
        if success:
            self.bot.answer_callback_query(
                call.id, 
                f"‚úÖ RSI Short —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}"
            )
            settings = self.subscription_service.get_user_settings(user_id)
            if settings:
                self._show_rsi_settings(call, settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def _toggle_notification(self, user_id: int, setting_name: str, call: CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings = self.subscription_service.get_user_settings(user_id)
        if not settings:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
        
        current_value = getattr(settings, setting_name, False)
        new_value = not current_value
        
        success = self.subscription_service.update_user_settings(
            user_id, 
            {setting_name: new_value}
        )
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            self.bot.answer_callback_query(
                call.id, 
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            updated_settings = self.subscription_service.get_user_settings(user_id)
            if updated_settings:
                self._show_notification_settings(call, updated_settings)
        else:
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")


def register_callback_handlers(bot: TeleBot, db_manager: DatabaseManager, config: Config):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    callback_handlers = CallbackHandlers(bot, db_manager, config)
    callback_handlers.register_handlers()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    bot.callback_query_handler(
        func=lambda call: call.data.startswith(("set_", "toggle_"))
    )(callback_handlers.handle_setting_change)
    
    return callback_handlers