import logging
import threading
import time
from typing import Optional

import schedule
from telebot import TeleBot

from config.settings import Config
from database.connection import DatabaseManager
from handlers import register_all_handlers
from services.market_analysis import AdvancedMarketAnalyzer
from services.signal_generator import SignalService
from utils.helpers import setup_logging


class TradingBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.bot: Optional[TeleBot] = None
        self.db_manager: Optional[DatabaseManager] = None
        self.market_analyzer: Optional[AdvancedMarketAnalyzer] = None
        # self.signal_service: Optional[SignalService] = None
        self._running = False
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            setup_logging(
                level=self.config.LOG_LEVEL,
                log_file=self.config.LOG_FILE
            )
            
            logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            self.bot = TeleBot(
                token=self.config.TELEGRAM_BOT_TOKEN,
                threaded=True
            )
            logging.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager = DatabaseManager(self.config.DB_CONFIG)
            if not self.db_manager.initialize():
                logging.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            self.market_analyzer = AdvancedMarketAnalyzer(self.config)
            self.signal_service = SignalService(
                self.config, 
                self.db_manager, 
                self.bot
            )
            logging.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            register_all_handlers(
                bot=self.bot,
                db_manager=self.db_manager,
                config=self.config,
                signal_service=self.signal_service,
                market_analyzer=self.market_analyzer
            )
            logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self._setup_scheduler()
            logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(
            self.db_manager.deactivate_expired_subscribers
        )
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫–∞–∂–¥—ã–µ 1-5 –º–∏–Ω—É—Ç (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
        schedule.every(self.config.ANALYSIS_INTERVAL_MINUTES).minutes.do(
            self._scheduled_market_analysis
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç  
        schedule.every(15).minutes.do(
            self.signal_service.update_signal_outcomes
        )
        
        logging.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ {self.config.ANALYSIS_INTERVAL_MINUTES} –º–∏–Ω")
    
    def _scheduled_market_analysis(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        if not self.config.AUTO_BROADCAST_ENABLED:
            logging.info("‚è∏ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω")
            return
            
        try:
            logging.info("üîç –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞")
            self.signal_service.analyze_and_broadcast()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self._running:
            try:
                schedule.run_pending()
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.initialize():
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        
        try:
            self._running = True
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            scheduler_thread = threading.Thread(
                target=self._run_scheduler,
                name="Scheduler",
                daemon=True
            )
            scheduler_thread.start()
            logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
            logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logging.info(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {self.config.ANALYSIS_INTERVAL_MINUTES} –º–∏–Ω")
            logging.info(f"üìà –ê–≤—Ç–æ–±—Ä–∞—Å—Å—ã–ª–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.config.AUTO_BROADCAST_ENABLED else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
            
            self.bot.polling(
                none_stop=True,
                interval=0,
                timeout=20,
                long_polling_timeout=20
            )
            
        except KeyboardInterrupt:
            logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            self.stop()
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop()
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self._running = False
        
        if self.bot:
            self.bot.stop_polling()
        
        if self.db_manager:
            self.db_manager.close()
            
        logging.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TradingBot()
        bot.start()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        exit(1)


if __name__ == "__main__":
    main()